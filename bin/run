#!/usr/local/bin/node

var au = require('../lib/avconv-utils');



// parse arguments

var args = process.argv.slice();
args.shift(); // node
args.shift(); // script source
//console.log( args );

if (args.length === 0) {
  console.error('Syntax is:\n  bin/run <video> [scale] [fps] [strategy] [mosaic]');
  process.exit(1);
}
var video    =                              args[0];
var scale    = args.length > 1 ? parseFloat(args[1]) : 0.25;
var fps      = args.length > 2 ? parseFloat(args[2]) : 1;
var strategy = args.length > 3 ?            args[3]  : 'horizontal';
var mosaic   = args.length > 4 ?            args[4]  : undefined;



var videoParts = video.split('/');
var videoFile = videoParts.pop();
var videoFile0   = videoFile.split('.')[0];
var videoFileExt = videoFile.split('.')[1];
var hash = videoFile.split('.')[0];
var videoPath = videoParts.join('/');

if (!mosaic) {
  mosaic = videoFile0 + '.jpg';
}



console.log([
  'arguments:\n',
  '  video:    ', video,    '\n',
  '  scale:    ', scale,    '\n',
  '  fps:      ', fps,      '\n',
  '  strategy: ', strategy, '\n',
  '  mosaic:   ', mosaic,   '\n'
].join(''));



// run utilities

au.doMosaicMagic(
  {
    video:    video,
    scale:    scale,
    fps:      fps,
    strategy: strategy,
    mosaic:   mosaic
  },
  function(err, res) {
    if (err) {
      console.error(err);
      process.exit(2);
    }

    //console.log(res);

    console.log([
      'output:\n',
      '  video duration: ' + res.videoDuration, '\n',
      '  video dims:     ' + res.videoDimensions.join(' x '), '\n',
      '  frame dims:     ' + res.frameDimensions.join(' x '), '\n',
      '  # frames:       ' + res.n, '\n',
      '  grid dims:      ' + res.grid.join(' x '), '\n',
      '  mosaic dims:    ' + res.mosaicDimensions.join(' x '), '\n',
      '  mosaic file:    ' + res.outFile, '\n',
      '\n------------------\n'
    ].join(''));
  }
);
